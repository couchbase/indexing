#!/bin/bash

source ~/.cienv

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$RELEASE" = "" ]; then
  echo 'RELEASE not set'
  exit 2
fi

if [ "$MANIFEST" = "" ]; then
  echo 'MANIFEST not set'
  exit 2
fi

if [ "$PEGGED" = "" ]; then
  export BLD_NUM=0
else
  export BLD_NUM=$PEGGED
fi

error_exit() {
  echo "</pre><h3>Server build failed: $1</h3><pre>"
  exit 2
}

>~/repos.list
note_version() {
  repo=$1
  pos=$2
  echo "$repo $pos" >>~/repos.list
  cd $pos
  current="$(git rev-parse HEAD)"
  test -f ~/$repo.good || (echo $current >~/$repo.good)
  good="$(cat ~/$repo.good)"
  echo -n "$repo is at <a href='https://github.com/couchbase/$repo/commit/$current'>${current:0:7}</a>, changes since last good build: "
  if [ "$current" != "$good" ]; then
    echo
    git log --pretty="format: <a href='https://github.com/couchbase/$repo/commit/%H'>%h</a> %s" $good..HEAD
    echo
  else
    echo "none"
  fi
}

echo "</pre><h3>Building</h3><pre>"
>$WORKSPACE/versions.cfg
>$WORKSPACE/make.log

if [ ! -d ~/.reference ]; then
  mkdir ~/.reference
  cd ~/.reference
  repo init -u ssh://github.com/couchbase/build-manifests -b master -m $MANIFEST -g all --mirror 1>>$WORKSPACE/make.log 2>&1
  test $? -eq 0 || error_exit "Repo Init"
fi

echo "Started building at $(date +'%Y/%m/%d %H:%M:%S')"
test "$BLD_NUM" = "0" || echo "Using pegged server, $BLD_NUM build"
echo "Calculating base"
rm -rf ~/.manifests
git clone ssh://github.com/couchbase/build-manifests ~/.manifests 1>>$WORKSPACE/make.log 2>&1
cd ~/.manifests

test "$BLD_NUM" = "0" && BLD_NUM="$(git log --oneline | grep "couchbase-server" | grep -F "$RELEASE-" | head -1 | sed "s/^.*$RELEASE-\([0-9]*\).*$/\1/g")"
SHA=$(git log --oneline | grep "couchbase-server" | grep "$RELEASE-$BLD_NUM" | head -1 | awk '{print $1}')
git branch thisrun $SHA 1>>$WORKSPACE/make.log 2>&1

num_cores=0
core_read_commands=("nproc --all" "sysctl -n hw.ncpu" "echo 32")
for cmd in $core_read_commands; do
  val=$(eval $cmd)
  if [ $? -eq 0 ]; then
    num_cores=$val
    break
  fi
done

echo "Updating mirror"
cd ~/.reference
repo sync -j $num_cores 1>>$WORKSPACE/make.log 2>&1

echo "Basing run on $RELEASE-$BLD_NUM <a href=https://github.com/couchbase/build-manifests/blob/$SHA/$MANIFEST>$SHA</a>"
find $WORKSPACE -mindepth 1 -not -name '*.log' -exec rm -rf {} + 1>>$WORKSPACE/make.log 2>&1
mkdir -p $WORKSPACE 1>>$WORKSPACE/make.log 2>&1
cd $WORKSPACE
repo init -u ~/.manifests -b thisrun -m $MANIFEST -g all --reference=~/.reference 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Repo Init at $SHA"

echo "Updating tree for run $TS"
cd $WORKSPACE
repo sync --no-clone-bundle --no-tags -j $num_cores 1>>$WORKSPACE/make.log 2>&1
test $? -eq 0 || error_exit "Updating tree"
test $WORKSPACE/cbbuild && test $WORKSPACE/voltron || error_exit "Unable to find voltron"

cd $WORKSPACE
rm -rf analytics/CMakeLists.txt

note_version query $WORKSPACE/goproj/src/github.com/couchbase/query
note_version gometa $WORKSPACE/goproj/src/github.com/couchbase/gometa
note_version ns_server $WORKSPACE/ns_server
note_version couchstore $WORKSPACE/couchstore
note_version forestdb $WORKSPACE/forestdb
note_version kv_engine $WORKSPACE/kv_engine

cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
echo "Switching indexing to $BRANCH"
git checkout $BRANCH 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout $BRANCH"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version indexing $WORKSPACE/goproj/src/github.com/couchbase/indexing

cd $WORKSPACE/goproj/src/github.com/couchbase/plasma
echo "Switching plasma to $BRANCH"
git checkout $BRANCH 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout $BRANCH"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version plasma $WORKSPACE/goproj/src/github.com/couchbase/plasma

cd $WORKSPACE/goproj/src/github.com/couchbase/nitro
echo "Switching nitro to $BRANCH"
git checkout $BRANCH 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout $BRANCH"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version nitro $WORKSPACE/goproj/src/github.com/couchbase/nitro

cd $WORKSPACE/goproj/src/github.com/couchbase/bhive
echo "Switching bhive to main"
git checkout main 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout main"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version bhive $WORKSPACE/goproj/src/github.com/couchbase/bhive

# cd $WORKSPACE/magma
# echo "Switching magma to cypher"
# git checkout cypher 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout cypher"
# git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
# note_version magma $WORKSPACE/magma

cd $WORKSPACE/goproj/src/github.com/couchbase/gometa
echo "Switching gometa to master"
git checkout master 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout master"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
note_version gometa $WORKSPACE/goproj/src/github.com/couchbase/gometa

cd $WORKSPACE/testrunner
echo "Switching testrunner to master"
git checkout master 1>>$WORKSPACE/make.log 2>&1 || error_exit "git checkout master"
git pull 1>>$WORKSPACE/make.log 2>&1 || error_exit "git pull"
git submodule init
git submodule update --init --force --remote
note_version testrunner $WORKSPACE/testrunner

>~/gerrit.list
if [ "$CIBOT" = "true" ]; then
  autolist="$(ssh review.couchbase.org gerrit query \"project:indexing status:open branch:$BRANCH reviewer:self\" | grep number: | awk '{print $2}' | sort -n)"
  for patch_id in $GERRIT $autolist; do
    cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
    revspec=$(git ls-remote -q ssh://review.couchbase.org/indexing refs/changes/*/$patch_id/* | awk '{print $2}' | sort -n -t/ -k5 | tail -1)
    if [ "$revspec" == "" ]; then continue; fi
    echo "Pulling in <a href='http://review.couchbase.org/#/c/$patch_id'>uncommitted change $patch_id</a> at $revspec"
    git fetch -q ssh://review.couchbase.org/indexing $revspec && git cherry-pick FETCH_HEAD
    test $? -eq 0 && echo "$revspec" | awk -F/ '{print $4 "," $5}' >>~/gerrit.list
  done
  autolist="$(ssh review.couchbase.org gerrit query \"project:plasma status:open branch:$BRANCH reviewer:self\" | grep number: | awk '{print $2}' | sort -n)"
  for patch_id in $GERRIT $autolist; do
    cd $WORKSPACE/goproj/src/github.com/couchbase/plasma
    revspec=$(git ls-remote -q ssh://review.couchbase.org/plasma refs/changes/*/$patch_id/* | awk '{print $2}' | sort -n -t/ -k5 | tail -1)
    if [ "$revspec" == "" ]; then continue; fi
    echo "Pulling in <a href='http://review.couchbase.org/#/c/$patch_id'>uncommitted change $patch_id</a> at $revspec"
    git fetch -q ssh://review.couchbase.org/plasma $revspec && git cherry-pick FETCH_HEAD
    test $? -eq 0 && echo "$revspec" | awk -F/ '{print $4 "," $5}' >>~/gerrit.list
  done

  autolist="$(ssh review.couchbase.org gerrit query \"project:bhive status:open branch:main reviewer:self\" | grep number: | awk '{print $2}' | sort -n)"
  for patch_id in $GERRIT $autolist; do
    cd $WORKSPACE/goproj/src/github.com/couchbase/bhive
    revspec=$(git ls-remote -q ssh://review.couchbase.org/bhive refs/changes/*/$patch_id/* | awk '{print $2}' | sort -n -t/ -k5 | tail -1)
    if [ "$revspec" == "" ]; then continue; fi
    echo "Pulling in <a href='http://review.couchbase.org/#/c/$patch_id'>uncommitted change $patch_id</a> at $revspec"
    git fetch -q ssh://review.couchbase.org/bhive $revspec && git cherry-pick FETCH_HEAD
    test $? -eq 0 && echo "$revspec" | awk -F/ '{print $4 "," $5}' >>~/gerrit.list
  done

  autolist="$(ssh review.couchbase.org gerrit query \"project:gometa status:open branch:master reviewer:self\" | grep number: | awk '{print $2}' | sort -n)"
  for patch_id in $GERRIT $autolist; do
    cd $WORKSPACE/goproj/src/github.com/couchbase/gometa
    revspec=$(git ls-remote -q ssh://review.couchbase.org/gometa refs/changes/*/$patch_id/* | awk '{print $2}' | sort -n -t/ -k5 | tail -1)
    if [ "$revspec" == "" ]; then continue; fi
    echo "Pulling in <a href='http://review.couchbase.org/#/c/$patch_id'>uncommitted change $patch_id</a> at $revspec"
    git fetch -q ssh://review.couchbase.org/gometa $revspec && git cherry-pick FETCH_HEAD
    test $? -eq 0 && echo "$revspec" | awk -F/ '{print $4 "," $5}' >>~/gerrit.list
  done
  autolist="$(ssh review.couchbase.org gerrit query \"project:nitro status:open branch:$BRANCH reviewer:self\" | grep number: | awk '{print $2}' | sort -n)"
  for patch_id in $GERRIT $autolist; do
    cd $WORKSPACE/goproj/src/github.com/couchbase/nitro
    revspec=$(git ls-remote -q ssh://review.couchbase.org/nitro refs/changes/*/$patch_id/* | awk '{print $2}' | sort -n -t/ -k5 | tail -1)
    if [ "$revspec" == "" ]; then continue; fi
    echo "Pulling in <a href='http://review.couchbase.org/#/c/$patch_id'>uncommitted change $patch_id</a> at $revspec"
    git fetch -q ssh://review.couchbase.org/nitro $revspec && git cherry-pick FETCH_HEAD
    test $? -eq 0 && echo "$revspec" | awk -F/ '{print $4 "," $5}' >>~/gerrit.list
  done
fi

# Add 2ici_test to tag to compile "testcode" package for CI
sed -i 's/SET (TAGS "jemalloc")/SET (TAGS "jemalloc 2ici_test")/' $WORKSPACE/goproj/src/github.com/couchbase/indexing/CMakeLists.txt

BUILD_ENTERPRISE=false builder # -forcex86 # add -forcex86 if build fail on arm64
test $? -eq 0 || exit $?
# Building again will delete output from previous build
builder # -forcex86 # add -forcex86 if build fail on arm64
test $? -eq 0 || exit $?

cd $WORKSPACE
repo manifest -r >current.xml
repo manifest -r >manifest.xml

echo "Actual Versions:" >>$WORKSPACE/versions.cfg
cd $WORKSPACE
repo forall -c 'echo "$REPO_PROJECT `git log --oneline HEAD...HEAD^`"' 2>/dev/null 1>>$WORKSPACE/versions.cfg

chmod a+r /var/www/*
