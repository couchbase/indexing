#!/bin/bash

source ~/.cienv

# echo "Disabled integration tests"

echo '</pre><h3>Testing</h3><pre>'

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$MODE" = "" ]; then
  echo 'MODE not set'
  exit 2
fi

if [ "$STORAGE" = "" ]; then
  echo 'STORAGE not set'
  exit 2
fi

if [ "$TS" = "" ]; then
  TS="adhoc"
fi

SVR_LESS_OPT=""
if [ "$DEPLOYMENT_MODEL" == "serverless" ]; then
	echo 'Running with DeploymentModel: Serverless'
	SVR_LESS_OPT="--serverless"
fi

start_cluster() {
  for a in {1..3}; do
    echo "Starting server: attempt $a"
    stop_cluster
    cd $WORKSPACE/ns_server
    cluster_run_path="./cluster_run"
    if [ -f build/cluster_run ]; then cluster_run_path="build/cluster_run"; fi
    $cluster_run_path -n4 $SVR_LESS_OPT 1>$WORKSPACE/run.log 2>&1 &
    disown
    for i in {1..120}; do
      grep -qs 'Couchbase Server has started' logs/n_0/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_1/info.log && \
          wget -qO- http://localhost:9000/ &>/dev/null &&
            wget -qO- http://localhost:9001/ &>/dev/null &&
              ok_run=1 && break
      sleep 3
    done
    test "$ok_run" || continue
    # enable developer preview for BHIVE indexes
    #echo y | ./couchbase-cli enable-developer-preview --enable -c 127.0.0.1:9000 -u $Username -p $Password
#    sleep 180
#    ./cluster_connect -n2 -s 1500 -I 1500 -T n0:kv+n1ql,n1:kv+index >$WORKSPACE/run.log 2>&1 &
#    for i in {1..120}; do
#      grep -qs 'Bucket "default" marked as warmed' logs/n_0/info.log && \
#        grep -qs 'Bucket "default" marked as warmed' logs/n_1/info.log && \
#          ok_connect=1 && break
#      sleep 3
#    done
#    test "$ok_connect" || continue
    break
  done
  test "$ok_run" || error_exit "Server startup failed even after 3 tries"
#  test "$ok_connect" || error_exit "Server connect failed even after 3 tries"
  sleep 60
}

start_cluster_serverless() {
  for a in {1..3}; do
    echo "Starting server: attempt $a"
    stop_cluster
    cluster_run_path="./cluster_run"
    if [ -f build/cluster_run ]; then cluster_run_path="build/cluster_run"; fi
    $cluster_run_path -n5 --serverless 1>$WORKSPACE/run.log 2>&1 &
    disown
    for i in {1..120}; do
      grep -qs 'Couchbase Server has started' logs/n_0/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_1/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_2/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_3/info.log && \
        grep -qs 'Couchbase Server has started' logs/n_4/info.log && \
          wget -qO- http://localhost:9000/ &>/dev/null &&
            wget -qO- http://localhost:9001/ &>/dev/null &&
            wget -qO- http://localhost:9002/ &>/dev/null &&
            wget -qO- http://localhost:9003/ &>/dev/null &&
            wget -qO- http://localhost:9004/ &>/dev/null &&
              ok_run=1 && break
      sleep 3
    done
    test "$ok_run" || continue
#    sleep 180
#    ./cluster_connect -n2 -s 1500 -I 1500 -T n0:kv+n1ql,n1:kv+index >$WORKSPACE/run.log 2>&1 &
#    for i in {1..120}; do
#      grep -qs 'Bucket "default" marked as warmed' logs/n_0/info.log && \
#        grep -qs 'Bucket "default" marked as warmed' logs/n_1/info.log && \
#          ok_connect=1 && break
#      sleep 3
#    done
#    test "$ok_connect" || continue
    break
  done
  test "$ok_run" || error_exit "Server startup failed even after 3 tries"
#  test "$ok_connect" || error_exit "Server connect failed even after 3 tries"
  sleep 60
}

stop_cluster() {
  killall -ABRT indexer 1>/dev/null 2>&1
  killall -ABRT projector 1>/dev/null 2>&1
  pkill -f cluster_
  pkill -f $WORKSPACE/install/bin
  pkill -f testrunner
  pkill -f $WORKSPACE/install
  pkill -f testrunner
  killall beam.smp epmd memcached projector indexer gometa python memcached.json 1>/dev/null 2>&1
  sleep 10
  killall -9 beam.smp epmd memcached projector indexer gometa python memcached.json 1>/dev/null 2>&1
  cd $WORKSPACE/ns_server
  make dataclean 1>/dev/null 2>&1
  sudo rm -f /tmp/core*
  sleep 10
}

collect_logs() {
  if [ "$phase" = "" ]; then phase=unknown; fi
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar ns_server/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar testrunner/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar test.log 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar run.log 1>/dev/null 2>&1
}

setUsernamePassword() {
   cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/
   export Username=$(grep -E -o ".Username\":.{0,20}" config/buildtest_$STORAGE.json | awk '{print $2}' | cut -d'"' -f2)
   export Password=$(grep -E -o ".Password\":.{0,20}" config/buildtest_$STORAGE.json | awk '{print $2}' | cut -d'"' -f2)
}

error_email() {
  if [ ! -f ~/.cigreen ]; then return; fi
  rm ~/.cigreen

  if test "`find ~ -maxdepth 1 -name .cinotify -mmin -1440`"; then return; fi
  touch ~/.cinotify

  if [ "$WATCHERS" = "" -o ! -f ~/.cicred ]; then return; fi
  cat /var/www/gsi-current.html | \
     sendemail -q \
       -s smtp.gmail.com \
       -o tls=yes \
       -xu cb.ci.bot@gmail.com \
       -xp "`cat ~/.cicred`" \
       -f "$CINAME <cb.ci.bot@gmail.com>" \
       -t $WATCHERS \
       -u "$CINAME broke"
}

error_exit() {
  echo "</pre><h4>Testing Failed: $1</h4><pre>"
  echo "$2"
  collect_logs
  stop_cluster
  for patch_id in `cat ~/gerrit.list`; do
    ssh review.couchbase.org gerrit query change:${patch_id%,*} AND reviewer:self AND status:open | grep -qs 'rowCount: 0' && continue
    failure_str=$(printf "MAYBE FAIL %s with storage %s. See http://%s.northscale.in/gsi-%s.fail.html;\nFailure reason %s;\nTests failed - %s" "$MODE" "$STORAGE" "$CINAME" "$TS" "$1" "$2")
    ssh review.couchbase.org gerrit review --code-review 0 -m "'$failure_str'" $patch_id
  done
  error_email
  exit 2
}

# Setup workspace
echo "Started testing at `date +'%Y/%m/%d %H:%M:%S'`"
echo "Testing mode: $MODE"
echo "Using storage type: $STORAGE"

 # Get ulimit -n: If less than 1024, set it to 1024.
ulimitVal=$(ulimit -n)
if [ $ulimitVal -gt 0 ]; then
  echo "Setting ulimit to 200000"
  ulimit -n 200000
fi

stop_cluster
rm -f $WORKSPACE/logs.tar* $WORKSPACE/test.log $WORKSPACE/run.log /tmp/core-*

export phase=sanity
if [[ "$MODE" == *"$phase"* ]]; then
  # Test the base
  echo "</pre><h4>Simple Test</h4><pre>"
  cd $WORKSPACE/testrunner
  (timeout 1h make simple-test 2>&1 | ts) | tee -a $WORKSPACE/test.log | egrep 'pass|fail|summary|ok$'
fi

# Core dumps
export GOTRACEBACK=single
ulimit -c 2097152
sudo bash -c "echo /tmp/core-%e.$TS.%p > /proc/sys/kernel/core_pattern"
perl -pi -e 's/num_files, 10/num_files, 50/' $WORKSPACE/install/etc/couchbase/static_config

arch=`uname -m`
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
gover="`grep -A20 'TARGET indexer PACKAGE' CMakeLists.txt  | grep GOVERSION | head -1 | sed 's/^.*\(\([0-9]\.[0-9]*.[0-9]\)\|\(SUPPORTED_NEWER\)\|\(SUPPORTED_OLDER\)\).*$/\1/'`"
newerGover="`cat $WORKSPACE/golang/versions/$gover.txt`"
golatest="`ls $HOME/.cbdepscache/exploded/$arch/ | grep $newerGover | tail -1`"

mkdir -p "$WORKSPACE/go"
export GOROOT=$HOME/.cbdepscache/exploded/$arch/$golatest/go
export GOPATH=$WORKSPACE/go:$WORKSPACE/godeps:$WORKSPACE/goproj
export PATH=$GOROOT/bin:$PATH
export C_INCLUDE_PATH=$WORKSPACE/platform/include/:$WORKSPACE/install/include:$WORKSPACE/forestdb/include:$WORKSPACE/build/tlm/deps/curl.exploded/include:$WORKSPACE/sigar/include:$WORKSPACE/build/tlm/deps/zstd-cpp.exploded/include:$WORKSPACE/build/tlm/deps/faiss.exploded/include:$WORKSPACE/magma/include:$WORKSPACE/build/tlm/deps/lz4.exploded/include
export CGO_LDFLAGS="-L $WORKSPACE/install/lib -Wl,-rpath $WORKSPACE/install/lib"
# export LD_LIBRARY_PATH=$WORKSPACE/install/lib
#Note: enabling auto tells go get to download modules under godeps/pkg/mod
#This breaks unit tests which depend on fixed file paths under monster module
export GO111MODULE=auto

cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests
go get -modcacherw -t ./... 1>/dev/null 2>&1

export phase=unit
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>Unit tests</h4><pre>"

  if [ "$STORAGE" = "memdb" ]; then
      cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/memdb/skiplist
      GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

      cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/memdb
      GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  elif [ "$STORAGE" = "plasma" ]; then
      cd $WORKSPACE/goproj/src/github.com/couchbase/nitro/skiplist
      GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

      cd $WORKSPACE/goproj/src/github.com/couchbase/plasma/zstd
      GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

      # unit test logs will be in the Server Log logs-<timestamp>.tar.gz at logs-unit-test.log
      cd $WORKSPACE/goproj/src/github.com/couchbase/plasma
      GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log | grep 'RUN\|PASS\|FAIL\|github'
  fi

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/collatejson
  GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/indexer
  GOTRACEBACK=crash GOMAXPROCS=16 go test -exec "env LD_LIBRARY_PATH=$WORKSPACE/install/lib" -vet=off -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/queryport/client
  GOTRACEBACK=crash GOMAXPROCS=16 go test -timeout 15m -v 2>&1 | tee -a $WORKSPACE/test.log

  collect_logs
fi

export phase=functional
if [[ "$MODE" == *"$phase"* ]]; then
  stop_cluster
  start_cluster
  setUsernamePassword
  export CBAUTH_REVRPC_URL="http://$Username:$Password@127.0.0.1:9000/query"
  echo "</pre><h4>Functional tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/functionaltests
  go test -timeout 4h -v -cbconfig ../config/buildtest_$STORAGE.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
  echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_1/indexer_functests_pprof.log"
  curl http://$Username:$Password@127.0.0.1:9108/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_1/indexer_functests_pprof.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/largedatatests
  go test -timeout 8h -v -cbconfig ../config/buildtest_$STORAGE.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
  echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_1/indexer_largedata_pprof.log"
  curl http://$Username:$Password@127.0.0.1:9108/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_1/indexer_largedata_pprof.log
  collect_logs
  stop_cluster
fi

export phase=serverless
currStorage=$STORAGE
export STORAGE=plasma
if [[ "$MODE" == *"$phase"* ]]; then
  if [ "$STORAGE" = "plasma" ]; then
    echo "</pre><h4>Serverless tests</h4><pre>"
    stop_cluster
    start_cluster_serverless
    setUsernamePassword
    export CBAUTH_REVRPC_URL="http://$Username:$Password@127.0.0.1:9000/query"
    echo "</pre><h4>Serverless tests</h4><pre>"
    cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/serverlesstests

    go test -timeout 4h -v -cbconfig ../config/buildtest_plasma.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
    echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_1/indexer_serverless_pprof.log"
    curl http://$Username:$Password@127.0.0.1:9108/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_1/indexer_serverless_pprof.log
    echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_2/indexer_serverless_pprof.log"
    curl http://$Username:$Password@127.0.0.1:9114/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_2/indexer_serverless_pprof.log
    echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_3/indexer_serverless_pprof.log"
    curl http://$Username:$Password@127.0.0.1:9120/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_3/indexer_serverless_pprof.log
    echo "Indexer Go routine dump logged in $WORKSPACE/ns_server/logs/n_4/indexer_serverless_pprof.log"
    curl http://$Username:$Password@127.0.0.1:9126/debug/pprof/goroutine?debug=1 > $WORKSPACE/ns_server/logs/n_4/indexer_serverless_pprof.log

    collect_logs
    stop_cluster
  fi
fi
export STORAGE=$currStorage

export phase=performance
if [[ "$MODE" == *"$phase"* ]]; then
  stop_cluster
  start_cluster
  export CBAUTH_REVRPC_URL="http://Administrator:asdasd@127.0.0.1:9000/query2"
  echo "</pre><h4>Performance tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tools/n1qlperf
  go build
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/cmd/cbindexperf
  go build
  cp $HOME/bin/config/* /opt/build/goproj/src/github.com/couchbase/indexing/secondary/tests/perftests/
  echo "</pre><h4>Performance tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/perftests
  go test -timeout 4h -v -cbconfig ../config/buildtest_memdb.json -perftool cbindexperf -numdocs 2000000 2>&1 | tee -a $WORKSPACE/test.log
  collect_logs
  stop_cluster
fi

export phase=integration
if [[ "$MODE" == *"$phase"* ]]; then
  echo "</pre><h4>Integration tests</h4><pre>"
  #export LD_LIBRARY_PATH=""
  cd $WORKSPACE/testrunner
  [ "$STORAGE" = "memdb" ] && export TYPE="memory_optimized"
  [ "$STORAGE" = "plasma" ] && export TYPE="plasma"
  [ "$STORAGE" = "fdb" ] && export TYPE="forestdb"
  # echo "Disabled integration tests"
  (timeout 1h make test-gsi-integrations-tests PARAMS=gsi_type=$TYPE 2>&1) | tee -a $WORKSPACE/test.log
  collect_logs
fi

# Verify results
> /tmp/fail.log
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/ci/
grep -a 'make:\s\*\*\*\s\[test-gsi-integrations-tests\]\s' $WORKSPACE/test.log >> /tmp/fail.log
grep -a '\sfail\s*$' $WORKSPACE/test.log >> /tmp/fail.log
grep -a 'FAIL\s*github.com/couchbase' $WORKSPACE/test.log >> /tmp/fail.log
grep -a -- '--- FAIL:' $WORKSPACE/test.log >> /tmp/fail.log
grep -a '^\s*2i' $WORKSPACE/test.log | grep 'fail\s*$' >> /tmp/fail.log
grep -a '^panic: ' $WORKSPACE/test.log >> /tmp/fail.log
skiplist="`cat skip.txt`"
for tst in $skiplist; do
  echo "$tst" | grep -qs '^\s*#' && continue
  echo "$tst" | grep -qs '^\s*$' && continue
  grep -v "$tst" /tmp/fail.log > /tmp/fail-out.log
  mv /tmp/fail-out.log /tmp/fail.log
done
faillog="`cat /tmp/fail.log`"
if [ "$faillog" != "" ]; then error_exit "Required test failed" "$faillog"; fi
echo "</pre><h4>Testing Succeeded</h4><pre>"
if [ "$skiplist" != "" ]; then
  echo "But we ignored these tests:"
  echo "$skiplist"
fi
echo

cd $WORKSPACE
cat ~/repos.list | egrep -v 'plasma|nitro|forestdb' |  while read line ; do
   repo=`echo $line | awk '{print $1}'`
   loc=`echo $line | awk '{print $2}'`
   cd $loc
   git rev-parse HEAD > ~/$repo.good
done

[ "$STORAGE" = "plasma" ] && cd $WORKSPACE/goproj/src/github.com/couchbase/plasma && git rev-parse HEAD > ~/plasma.good
[ "$STORAGE" = "memdb" ] && cd $WORKSPACE/goproj/src/github.com/couchbase/nitro && git rev-parse HEAD > ~/nitro.good
[ "$STORAGE" = "fdb" ] && cd $WORKSPACE/forestdb && git rev-parse HEAD > ~/forestdb.good

if [ "$CIBOT" = "true" ]; then
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
  git rev-parse couchbase/$BRANCH > ~/indexing.good
  for patch_id in `cat ~/gerrit.list`; do
    ssh review.couchbase.org gerrit query change:${patch_id%,*} AND reviewer:self AND status:open | grep -qs 'rowCount: 0' && continue
    ssh review.couchbase.org gerrit review --code-review 1 -m "'PASS $MODE with storage $STORAGE. See http://$CINAME.northscale.in/gsi-$TS.pass.html'" $patch_id
  done
fi

go clean -modcache

touch ~/.cigreen
exit 0
