syntax = "proto2";

package protoQuery;

// Error message can be sent back as response or
// encapsulated in response packets.
message Error {
    required string error = 1; // Empty string means success
}

// consistency timestamp specifying a subset of vbucket.
// AnyConsistency, this message is typically ignored.
// SessionConsistency, {vbnos, seqnos, crc64} are to be considered.
// QueryConsistency, {vbnos, seqnos, vbuuids} are to be considered.
message TsConsistency {
    repeated uint32 vbnos   = 1; // subset of vbucket numbers
    repeated uint64 seqnos  = 2; // corresponding seqno. for each vbucket
    repeated uint64 vbuuids = 3; // corresponding vbuuid for each vbucket
    optional uint64 crc64   = 4; // if present, crc64 hash value of all vbuuids
}

message IndexVector {
    repeated float queryVector   = 1;
    required int32 indexKeyPos   = 2;
    required int32 probes        = 3;
    required bool  actualVector  = 4;
}

message IndexKeyOrder {
    repeated int32 keyPos = 1;
    repeated bool  desc   = 2;
}

// Request can be one of the optional field.
message QueryPayload {
    required uint32             version           = 1;
    optional StatisticsRequest  statisticsRequest = 2;
    optional StatisticsResponse statistics        = 3;
    optional ScanRequest        scanRequest       = 4;
    optional ScanAllRequest     scanAllRequest    = 5;
    optional ResponseStream     stream            = 6;
    optional CountRequest       countRequest      = 7;
    optional CountResponse      countResponse     = 8;
    optional EndStreamRequest   endStream         = 9;
    optional StreamEndResponse  streamEnd         = 10;
    optional HeloRequest        heloRequest       = 11;
    optional HeloResponse       heloResponse      = 12;
    optional AuthRequest        authRequest       = 13;
    optional AuthResponse       authResponse      = 14;
}

// Get current server version/capabilities
message HeloRequest {
    required uint32 version = 1;
}

message HeloResponse {
    required uint32 version = 1;
}

// Get Index statistics. StatisticsResponse is returned back from indexer.
message StatisticsRequest {
    required uint64 defnID    = 1;
    required Span   span      = 2;
    optional string requestId = 3;
}

message StatisticsResponse {
    required IndexStatistics stats = 1;
    optional Error           err   = 2;
}

// Scan request to indexer.
message ScanRequest {
    required uint64        	    defnID    		= 1;
    required Span          	    span      		= 2;
    required bool          	    distinct  		= 3;
    required int64         	    limit     		= 4;
    required uint32        	    cons      		= 5;
    optional TsConsistency 	    tsVector    	= 6;
    optional string        	    requestId 		= 7;
    repeated Scan        	    scans 		    = 8;
    optional IndexProjection    indexprojection	= 9;
	optional bool				reverse			= 10;
	optional int64				offset			= 11;
	optional int64				rollbackTime    = 12;
	repeated uint64				partitionIds    = 13;
    optional GroupAggr          groupAggr       = 14;
    optional bool               sorted          = 15;
    optional uint32             dataEncFmt      = 16;
    optional string             user            = 17;
    optional bool               skipReadMetering    = 18;
    optional IndexVector        indexVector     = 19;
    optional int64              ReqTimeout      = 20;
    optional IndexKeyOrder      indexOrder      = 21;
    repeated string             indexKeyNames   = 22;
    optional string             inlineFilter    = 23;
}

// Full table scan request from indexer.
message ScanAllRequest {
    required uint64        defnID        = 1;
    required int64         limit         = 2;
    required uint32        cons          = 3;
    optional TsConsistency tsVector      = 4;
    optional string        requestId     = 5;
	optional int64		   rollbackTime  = 6;
	repeated uint64		   partitionIds  = 7;
	optional uint32        dataEncFmt    = 8;
    optional string        user          = 9;
    optional bool          skipReadMetering  = 10;
    optional IndexVector   indexVector   = 11;
    optional int64         ReqTimeout    = 12;
}

// Request by client to stop streaming the query results.
message EndStreamRequest {
}

message ResponseStream {
    repeated IndexEntry indexEntries = 1;
    optional Error      err     = 2;
}

// Last response packet sent by server to end query results.
message StreamEndResponse {
    optional Error  err       = 1;
    optional uint64 readUnits = 2;
}

// Count request to indexer.
message CountRequest {
    required uint64        defnID           = 1;
    required Span          span             = 2;
    required uint32        cons             = 3;
    optional TsConsistency TsVector         = 4;
    optional string        requestId        = 5;
    optional bool          distinct         = 6;
    repeated Scan          scans            = 7;
    optional int64         rollbackTime     = 8;
    repeated uint64        partitionIds     = 9;
    optional bool          skipReadMetering = 10;
    optional string        user             = 11;
    optional int64         ReqTimeout       = 12;
}

// total number of entries in index.
message CountResponse {
    required int64 count = 1;
    optional Error err   = 2;
}

// Query messages / arguments for indexer

message Span {
    optional Range range  = 1;
    repeated bytes equals = 2;
}

message Range {
    optional bytes  low       = 1;
    optional bytes  high      = 2;
    required uint32 inclusion = 3;
}

message CompositeElementFilter {
    optional bytes  low       = 1;
    optional bytes  high      = 2;
    required uint32 inclusion = 3;
}

message Scan {
    repeated CompositeElementFilter  filters  = 1;
    repeated bytes                   equals   = 2;
}

message IndexProjection {
	repeated int64  EntryKeys     = 1;
	optional bool   PrimaryKey    = 2;
}

message IndexEntry {
    optional bytes  entryKey   = 1;
    required bytes  primaryKey = 2;
}

// Statistics of a given index.
message IndexStatistics {
    required uint64 keysCount       = 1;
    required uint64 uniqueKeysCount = 2;
    required bytes  keyMin          = 3;
    required bytes  keyMax          = 4;
}


//Groupby/Aggregate

message GroupKey {
    optional int32 entryKeyId = 1;
    required int32 keyPos     = 2;
    optional bytes  expr       = 3;
}

message Aggregate {
    required uint32 aggrFunc     = 1;
    optional int32 entryKeyId   = 2;
    required int32 keyPos       = 3;
    optional bytes  expr         = 4;
    optional bool   distinct     = 5;
}

message GroupAggr {
    optional bytes     name                = 1;
    repeated GroupKey  groupKeys           = 2;
    repeated Aggregate aggrs               = 3;
    repeated int32     dependsOnIndexKeys  = 4;
    repeated bytes     indexKeyNames = 5;
    optional bool      allowPartialAggr = 6;
    optional bool      onePerPrimaryKey = 7;
}

// Queryport server authentication

message AuthRequest {
    required string user          = 1;
    required string pass          = 2;
    optional uint32 clientVersion = 3;
}

message AuthResponse {
    required uint32 code = 1;
}
