syntax = "proto2";

package protoData;

// List of possible mutation commands.
enum Command {
    Upsert         = 1; // data command
    Deletion       = 2; // data command
    UpsertDeletion = 3; // data command
    Sync           = 4; // control command
    DropData       = 5; // control command
    StreamBegin    = 6; // control command
    StreamEnd      = 7; // control command

    CollectionCreate  = 8; // control command
    CollectionDrop    = 9; // control command
    CollectionFlush   = 10; // control command
    ScopeCreate       = 11; // control command
    ScopeDrop         = 12; // control command
    CollectionChanged = 13; // control command

    UpdateSeqno = 14; // control command
}

enum ProjectorVersion {
    V5_1_0 = 1;
    V5_1_1 = 2;
    V5_5_1 = 3;
    V5_6_5 = 4;
    V7_0_0 = 5;
    V7_6_0 = 6;
}

// A single mutation message that will framed and transported by router.
// For efficiency mutations from mutiple vbuckets (bounded to same connection)
// can be packed into the same message.
message Payload {
    required uint32          version = 1; // protocol version TBD

    // -- Following fields are mutually exclusive --
    repeated VbKeyVersions   vbkeys  = 2;
    optional VbConnectionMap vbmap   = 3;
    optional AuthRequest authRequest = 4;
}


// List of vbuckets that will be streamed via a newly opened connection.
message VbConnectionMap {
    required string keyspaceId = 1;
    repeated uint32 vbuckets   = 3;
    repeated uint64 vbuuids    = 4;
}

message VbKeyVersions {
    required uint32      vbucket      = 2; // 16 bit vbucket in which document is located
    required uint64      vbuuid       = 3; // unique id to detect branch history
    required string      keyspaceId   = 4;
    repeated KeyVersions kvs          = 5; // list of key-versions
    optional ProjectorVersion projVer = 6; // projector version
    optional uint64      opaque2      = 7; //client opaque
}

message Vector {
    repeated float vector = 1; // Array of floats
}

message Vectors {
    repeated Vector vectors = 1; // Array of array of floats
}

message FieldPos {
    repeated int32 fieldPos = 1; // Array of integers
}
// mutations are broadly divided into data and control messages. The division
// is based on the commands.
//
// Interpreting seq.no:
// 1. For Upsert, Deletion, UpsertDeletion messages, sequence number corresponds
//    to kv mutation.
// 2. For Sync message, it is the latest kv mutation sequence-no. received for
//    a vbucket.
// 3. For DropData message, it is the first kv mutation that was dropped due
//    to buffer overflow.
// 4. For StreamBegin, it is zero.
// 5. For StreamEnd, it is the last kv mutation received before ending a vbucket
//    stream with kv.
//
// Interpreting Snapshot marker:
//    Key versions can contain snapshot-marker {start-seqno, end-seqno},
//    instead of using separate field for them, following fields are
//    mis-interpreted,
//      uuid   - type  (8 byte)
//      key    - start-seqno (8 byte)
//      oldkey - end-seqno (8 byte)
//
// fields `docid`, `uuids`, `keys`, `oldkeys` are valid only for
// Upsert, Deletion, UpsertDeletion messages.
message KeyVersions {
    required uint64  seqno     = 1; // sequence number corresponding to this mutation
    optional bytes   docid        = 2; // primary document id
    repeated uint64  uuids        = 3; // uuids, hosting key-version
    repeated uint32  commands     = 4; // list of command for each uuid
    repeated bytes   keys         = 5; // key-versions for each uuids listed above
    repeated bytes   oldkeys      = 6; // key-versions from old copy of the document
    repeated bytes   partnkeys    = 7; // partition key for each key-version
    optional int64   prjMovingAvg = 8; // Moving avg. latency of mutation processing in projector
    repeated Vectors vectors      = 9; // List of vectors in input document - Used only for vector indexes

    repeated FieldPos     centroidPos       = 10; // Postition of centroidIds for each instance in the encoded key
    repeated bytes        includeColumns    = 11; // include column keys for each uuid
}

// Dataport server authentication

message AuthRequest {
    required string user = 1;
    required string pass = 2;
}
