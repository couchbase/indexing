CMAKE_MINIMUM_REQUIRED (VERSION 3.13)
PROJECT (indexing)

INCLUDE (FindCouchbaseGo)
INCLUDE (FindCouchbaseJemalloc)
INCLUDE (FindCouchbaseCurl)
INCLUDE (FindCouchbaseGrpc)
INCLUDE (FindCouchbaseLZ4)

IF (BUILD_ENTERPRISE)
  MESSAGE(STATUS "Building EE edition of GSI")
  SET (TAGS "jemalloc")
ELSE (BUILD_ENTERPRISE)
  MESSAGE(STATUS "Building CE edition of GSI")
  SET (TAGS "jemalloc community")
ENDIF (BUILD_ENTERPRISE)

SET (LDFLAGS)
IF (APPLE)
  # On macOS, we must use -rpath to locate libraries
  # TODO: Remove debug info stripping (-s) added to allow 1.7.6 to work on macOS
  SET (LDFLAGS "-s -extldflags '-Wl,-rpath,@executable_path/../lib'")
ENDIF ()

IF (WIN32)
   if("${MSVC_VERSION}" LESS 1910)
      SET (LDFLAGS "${LDFLAGS} -linkmode internal")
   endif()
ENDIF ()

GET_FILENAME_COMPONENT (CURL_LIBRARY_DIR "${CURL_LIBRARIES}" DIRECTORY)
GET_FILENAME_COMPONENT (JEMALLOC_LIB_DIR "${JEMALLOC_LIBRARY_RELEASE}" DIRECTORY)
GET_FILENAME_COMPONENT (ZSTD_CPP_LIBRARY_DIR "${ZSTD_CPP_LIBRARIES}" DIRECTORY)
GET_FILENAME_COMPONENT (LZ4_LIBRARY_DIR "${LZ4_LIBRARIES}" DIRECTORY)

SET(CGO_INCLUDE_DIRS "${FORESTDB_INCLUDE_DIR};${sigar_SOURCE_DIR}/include;${Platform_SOURCE_DIR}/include;${CURL_INCLUDE_DIR};${ZSTD_CPP_INCLUDE_DIR};${MAGMA_INCLUDE_DIR};${LZ4_INCLUDE_DIR}")
SET(CGO_LIBRARY_DIRS "${FORESTDB_LIBRARY_DIR};${sigar_BINARY_DIR}/src;${Platform_BINARY_DIR};${CURL_LIBRARY_DIR};${ZSTD_CPP_LIBRARY_DIR};${MAGMA_LIBRARY_DIR};${LZ4_LIBRARY_DIR}")
SET(DEPS sigar forestdb platform proto-generated n1ql-yacc)

IF (BUILD_ENTERPRISE)
  LIST(APPEND DEPS magma_shared)
ENDIF (BUILD_ENTERPRISE)

IF(NOT JEMALLOC_FOUND)
  MESSAGE (FATAL_ERROR "GSI requires jemalloc normally, but it was not found")
ENDIF(NOT JEMALLOC_FOUND)

IF (CB_USE_FAISS)
  LIST(APPEND DEPS faiss_c)
  SET(TAGS "${TAGS} vectors")
ENDIF ()

SET (ENV{CGO_CFLAGS} "$ENV{CGO_CFLAGS} -DJEMALLOC=1")
SET (CGO_INCLUDE_DIRS "${CGO_INCLUDE_DIRS};${JEMALLOC_INCLUDE_DIR}")
SET (CGO_LIBRARY_DIRS "${CGO_LIBRARY_DIRS};${JEMALLOC_LIB_DIR}")

# NOTE: Everytime a new .proto file is added, add it to the right list
SET (DATA_PROTO_FILES "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/data/mutation.proto")

SET (PROJECTOR_PROTO_FILES
   "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector/common.proto"
   "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector/index.proto"
   "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector/partn_key.proto"
   "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector/partn_single.proto"
   "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector/partn_tp.proto"
   "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector/projector.proto")

SET (QUERY_PROTO_FILES "${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/query/query.proto")

# Compute corresponding .pb.go files
STRING (REPLACE ".proto" ".pb.go" DATA_PBGO_FILES "${DATA_PROTO_FILES}")
STRING (REPLACE ".proto" ".pb.go" PROJECTOR_PBGO_FILES "${PROJECTOR_PROTO_FILES}")
STRING (REPLACE ".proto" ".pb.go" QUERY_PBGO_FILES "${QUERY_PROTO_FILES}")

ADD_CUSTOM_COMMAND(
        OUTPUT ${DATA_PBGO_FILES}
        COMMAND ${PROTOC} ARGS -I ${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/data
            --go_out=${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/data
            --plugin=protoc-gen-go=${PROTOC_GEN_GO_EXE}
            ${DATA_PROTO_FILES}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
        DEPENDS ${DATA_PROTO_FILES}
        COMMENT "Generating protobuf/data autogenerated files")

ADD_CUSTOM_COMMAND(
        OUTPUT ${PROJECTOR_PBGO_FILES}
        COMMAND ${PROTOC} ARGS -I ${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector
            --go_out=${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/projector
            --plugin=protoc-gen-go=${PROTOC_GEN_GO_EXE}
            ${PROJECTOR_PROTO_FILES}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
        DEPENDS ${PROJECTOR_PROTO_FILES}
        COMMENT "Generating protobuf/projector autogenerated files")

ADD_CUSTOM_COMMAND(
        OUTPUT ${QUERY_PBGO_FILES}
        COMMAND ${PROTOC} ARGS -I ${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/query
            --go_out=${CMAKE_CURRENT_SOURCE_DIR}/secondary/protobuf/query
            --plugin=protoc-gen-go=${PROTOC_GEN_GO_EXE}
            ${QUERY_PROTO_FILES}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
        DEPENDS ${QUERY_PROTO_FILES}
        COMMENT "Generating protobuf/query autogenerated files")

ADD_CUSTOM_TARGET(proto-generated DEPENDS
        ${DATA_PBGO_FILES}
        ${PROJECTOR_PBGO_FILES}
        ${QUERY_PBGO_FILES}
)

GoModBuild (TARGET indexer PACKAGE github.com/couchbase/indexing/secondary/cmd/indexer
  DEPENDS ${DEPS}
  LDFLAGS "${LDFLAGS}"
  CGO_INCLUDE_DIRS "${CGO_INCLUDE_DIRS}"
  CGO_LIBRARY_DIRS "${CGO_LIBRARY_DIRS}"
  GOTAGS "${TAGS}"
  INSTALL_PATH bin OUTPUT indexer
  GOVERSION SUPPORTED_NEWER)

GoModBuild (TARGET projector PACKAGE github.com/couchbase/indexing/secondary/cmd/projector
  DEPENDS ${DEPS}
  CGO_INCLUDE_DIRS "${CGO_INCLUDE_DIRS}"
  CGO_LIBRARY_DIRS "${CGO_LIBRARY_DIRS}"
  GOTAGS "${TAGS}"
  LDFLAGS "${LDFLAGS}"
  INSTALL_PATH bin
  GOVERSION SUPPORTED_NEWER)

GoModBuild (TARGET cbindex PACKAGE github.com/couchbase/indexing/secondary/cmd/cbindex
  DEPENDS ${DEPS}
  GOTAGS "${TAGS}"
  CGO_INCLUDE_DIRS "${CGO_INCLUDE_DIRS}"
  CGO_LIBRARY_DIRS "${CGO_LIBRARY_DIRS}"
  LDFLAGS "${LDFLAGS}"
  INSTALL_PATH bin
  GOVERSION SUPPORTED_NEWER)

GoModBuild (TARGET cbindexperf PACKAGE github.com/couchbase/indexing/secondary/cmd/cbindexperf
  DEPENDS ${DEPS}
  CGO_INCLUDE_DIRS "${CGO_INCLUDE_DIRS}"
  CGO_LIBRARY_DIRS "${CGO_LIBRARY_DIRS}"
  GOTAGS "${TAGS}"
  LDFLAGS "${LDFLAGS}"
  INSTALL_PATH bin
  GOVERSION SUPPORTED_NEWER)

GoModBuild (TARGET cbindexplan PACKAGE github.com/couchbase/indexing/secondary/cmd/cbindexplan
  DEPENDS ${DEPS}
  CGO_INCLUDE_DIRS "${CGO_INCLUDE_DIRS}"
  CGO_LIBRARY_DIRS "${CGO_LIBRARY_DIRS}"
  GOTAGS "${TAGS}"
  LDFLAGS "${LDFLAGS}"
  INSTALL_PATH bin OUTPUT cbindexplan
  GOVERSION SUPPORTED_NEWER)

AddMetricsMetadata (JSON secondary/docs/metrics_metadata.json COMPONENT index)
